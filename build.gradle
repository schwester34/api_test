plugins{
    id 'java-library'
    id "io.qameta.allure" version "2.9.6"
    id "io.freefair.lombok" version "6.4.2"
}

repositories{
    mavenCentral()
}

def allureVersion = "2.17.2",
    restAssured = "4.5.1",
    selenideVersion = "6.3.5",
    junitVersion = "5.8.2",
    slf4jVersion = "1.7.32",
    aspectjVersion = "1.9.9",
    assertjVersion = "3.22.0",
    jacksonVersion = "2.13.2.2"

allure {
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
    report {
        version.set(allureVersion)
    }
}

dependencies {
    testImplementation(
            "io.rest-assured:rest-assured:$restAssured",
            "io.rest-assured:json-schema-validator:$restAssured",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.aspectj:aspectjweaver:$aspectjVersion"
    )
    testRuntimeOnly(
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    )
}

tasks.withType(JavaCompile){
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}